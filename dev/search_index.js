var documenterSearchIndex = {"docs":
[{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"EditURL = \"3-parameter-estimation.jl\"","category":"page"},{"location":"3-parameter-estimation/#Parameter-estimation-using-proteomics-and-flux-data","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"","category":"section"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"import DifferentiableMetabolism as D\nimport FastDifferentiation as F\nconst Ex = F.Node\nimport ConstraintTrees as C\nimport AbstractFBCModels as A\nimport COBREXA as X\nimport Tulip as T\nimport Clarabel as Q\nimport CairoMakie as CM","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"load a small test model","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"include(\"../../test/simple_model.jl\");\nnothing #hide","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"prune model","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"delete!(model.reactions, \"r5\")\ndelete!(model.genes, \"g4\")\ndelete!(model.genes, \"g5\")\ndelete!(model.genes, \"g3\")\nmodel.reactions[\"r4\"].gene_association_dnf = [[\"g2\"]]\nmodel.reactions[\"r1\"].lower_bound = -1000.0\nmodel.reactions[\"r2\"].lower_bound = -1000.0","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"now models looks like this","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"(Image: simple_model)","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"F.@variables r3 r4\n\nreaction_isozymes = Dict(\n    \"r3\" => Dict(\n        \"isozyme1\" => X.IsozymeT{Ex}(\n            gene_product_stoichiometry = Dict(\"g1\" => 1.0),\n            kcat_forward = r3,\n            kcat_reverse = nothing,\n        ),\n    ),\n    \"r4\" => Dict(\n        \"isozyme1\" => X.IsozymeT{Ex}(\n            gene_product_stoichiometry = Dict(\"g2\" => 1.0),\n            kcat_forward = r4,\n            kcat_reverse = nothing,\n        ),\n    ),\n)\n\ngene_product_molar_masses = Dict(\"g1\" => 20.0, \"g2\" => 10.0)\n\nF.@variables capacitylimitation\n\ntrue_parameter_values = Dict(:capacitylimitation => 50.0, :r3 => 2.0, :r4 => 3.0)\n\nkm = X.enzyme_constrained_flux_balance_constraints(\n    model;\n    reaction_isozymes,\n    gene_product_molar_masses,\n    capacity = capacitylimitation,\n)\n\nsol = D.optimized_constraints_with_parameters(\n    km,\n    true_parameter_values;\n    objective = km.objective.value,\n    optimizer = T.Optimizer,\n)\n\nsol.tree.fluxes","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"create a loss function","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"measured = [\n    sol.tree.fluxes.r1,\n    sol.tree.fluxes.r3,\n    sol.tree.isozyme_forward_amounts.r3.isozyme1,\n    sol.tree.isozyme_forward_amounts.r4.isozyme1,\n]\n\nkm *=\n    :loss^C.Constraint(;\n        value = 0.5 * (\n            C.squared(km.fluxes.r1.value - measured[1]) +\n            C.squared(km.fluxes.r3.value - measured[2]) +\n            C.squared(km.isozyme_forward_amounts.r3.isozyme1.value - measured[3]) +\n            C.squared(km.isozyme_forward_amounts.r4.isozyme1.value - measured[4])\n        ),\n        bound = nothing,\n    )\n\nestimated_parameters = Dict(:capacitylimitation => 50.0, :r3 => 5.0, :r4 => 1.0) # initial values\nη = 0.1 # learning rate\n\nlosses = Float64[]\n\nkmKKT, vids =\n    D.differentiate_prepare_kkt(km, km.loss.value, [:r3, :r4, :capacitylimitation])\n\nfor k = 1:150\n\n    _sol = D.optimized_constraints_with_parameters(\n        km,\n        estimated_parameters;\n        objective = km.loss.value,\n        optimizer = Q.Optimizer,\n        sense = X.Minimal,\n        modifications = [X.silence],\n    )\n    push!(losses, _sol.tree.loss)\n\n    sens = D.differentiate_solution(\n        kmKKT,\n        _sol.primal_values,\n        _sol.equality_dual_values,\n        _sol.inequality_dual_values,\n        estimated_parameters,\n    )\n    measured_idxs = [1, 3, 12, 11]\n\n    x = [\n        _sol.tree.fluxes.r1,\n        _sol.tree.fluxes.r3,\n        _sol.tree.isozyme_forward_amounts.r3.isozyme1,\n        _sol.tree.isozyme_forward_amounts.r4.isozyme1,\n    ]\n\n    dL_dx = x - measured # derivative of loss function with respect to optimization variables\n    dL_dkcats = sens[measured_idxs, :]' * dL_dx # derivative of loss function with respect to parameters\n\n    estimated_parameters[:r3] -= η * dL_dkcats[1]\n    estimated_parameters[:r4] -= η * dL_dkcats[2]\nend\n\nCM.lines(losses; axis = (xlabel = \"Iterations\", ylabel = \"L2 loss\"))","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"This page was generated using Literate.jl.","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"EditURL = \"1-parametric-models.jl\"","category":"page"},{"location":"1-parametric-models/#Parametric-constraint-based-metabolic-models","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"","category":"section"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"import DifferentiableMetabolism as D\nimport FastDifferentiation as F\nconst Ex = F.Node\nimport ConstraintTrees as C\nimport COBREXA as X\nimport Tulip as T\nimport Clarabel as Q","category":"page"},{"location":"1-parametric-models/#Load-and-solve-a-simple-model","page":"Parametric constraint-based metabolic models","title":"Load and solve a simple model","text":"","category":"section"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"load a small test model","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"include(\"../../test/simple_model.jl\");\nnothing #hide","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"(Image: simple_model)","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"model","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"Build a basic ConstraintTree model without parameters","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"m = X.flux_balance_constraints(model)","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"Solve normally","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"base_model = X.optimized_values(m; optimizer = T.Optimizer, objective = m.objective.value)\nbase_model.fluxes","category":"page"},{"location":"1-parametric-models/#Add-parameters-to-the-model","page":"Parametric constraint-based metabolic models","title":"Add parameters to the model","text":"","category":"section"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"Make bound of r2 and mass balance of m3 parameters","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"F.@variables r2bound m3bound\n\nm.fluxes.r2 = C.Constraint(m.fluxes.r2.value, C.BetweenT(-2 * r2bound, Ex(0)))\n\nm.flux_stoichiometry.m3 =\n    C.Constraint(m.flux_stoichiometry.m3.value, C.EqualToT(m3bound) / 2)","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"tip: Use the generalized bounds from ConstraintTrees\nNote, ConstraintTrees.jl exports Between and EqualTo which are specialized to Float64. To use parameters as shown here, you must use the more general types BetweenT and EqualToT. Appropriate overloads have been added to simplify type promotion when adding floaty bounds to symbolic bounds.","category":"page"},{"location":"1-parametric-models/#add-parametric-constraints","page":"Parametric constraint-based metabolic models","title":"add parametric constraints","text":"","category":"section"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"p = F.make_variables(:p, 4)\n\nm *=\n    :linparam^C.Constraint(\n        value = p[1] * m.fluxes.r1.value + p[2] * m.fluxes.r2.value,\n        bound = C.BetweenT(-p[3], Ex(0)),\n    )","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"tip: Use the generalized value types from ConstraintTrees\nNote, ConstraintTrees.jl exports LinearValue and QuadraticValue which are specialized to Float64. To use parameters as shown here, you must use the more general types LinearValueT and QuadraticValueT. Appropriate overloads have been added to simplify type construction and promotion (as used above). But note that m.linparam.value is a ConstraintTrees.LinearValueT{FastDifferentiation.Node}.","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"substitute params into model to yield a \"normal\" constraint tree model","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"parameter_substitutions = Dict(\n    :r2bound => 4.0,\n    :m3bound => 0.1, # lose some mass here\n    :p1 => 1.0,\n    :p2 => 1.0,\n    :p3 => 4.0,\n)\n\nm_substituted = D.substitute(m, k -> parameter_substitutions[k])","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"this can be solve like any constraint tree","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"m_normal = X.optimized_values(\n    m_substituted,\n    objective = m.objective.value,\n    optimizer = T.Optimizer,\n)","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"alternatively, a convenience function can take care of the substitutions for you","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"m_noparams = D.optimized_constraints_with_parameters(\n    m,\n    parameter_substitutions;\n    objective = m.objective.value,\n    optimizer = T.Optimizer,\n)","category":"page"},{"location":"1-parametric-models/#Change-the-parameters-and-re-solve","page":"Parametric constraint-based metabolic models","title":"Change the parameters and re-solve","text":"","category":"section"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"substitute params into model","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"parameter_substitutions[:m3bound] = 0.0\n\nm_noparams2 = D.optimized_constraints_with_parameters(\n    m,\n    parameter_substitutions;\n    objective = m.objective.value,\n    optimizer = T.Optimizer,\n)\n\nm_noparams2.tree.fluxes","category":"page"},{"location":"1-parametric-models/#Quadratic-parameters-also-work","page":"Parametric constraint-based metabolic models","title":"Quadratic parameters also work","text":"","category":"section"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"q = F.make_variables(:q, 6)\n\nm.objective = C.Constraint(\n    value = sum(\n        rxn.value * rxn.value * qi for (qi, rxn) in zip(collect(q), values(m.fluxes))\n    ),\n    bound = nothing,\n)\n\nm *= :objective_bound^C.Constraint(value = m.fluxes.r6.value, bound = 2.0)\n\nparameter_substitutions =\n    merge(parameter_substitutions, Dict(v.node_value => 1.0 for v in q))\n\nm_noparams3 = D.optimized_constraints_with_parameters(\n    m,\n    parameter_substitutions;\n    objective = m.objective.value,\n    optimizer = Q.Optimizer,\n    sense = X.Minimal,\n)\n\nm_noparams3.tree.fluxes","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"This page was generated using Literate.jl.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"EditURL = \"2-differentiate-enzyme-model.jl\"","category":"page"},{"location":"2-differentiate-enzyme-model/#Differentiating-enzyme-constrained-metabolic-models","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"","category":"section"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"import DifferentiableMetabolism as D\nimport FastDifferentiation as F\nconst Ex = F.Node\nimport ConstraintTrees as C\nimport AbstractFBCModels as A\nimport JSONFBCModels as JFBC\nimport COBREXA as X\nimport Tulip as T\nimport Clarabel as Q\nimport Downloads: download\nimport CairoMakie as CM\n\n!isfile(\"e_coli_core.json\") &&\n    download(\"http://bigg.ucsd.edu/static/models/e_coli_core.json\", \"e_coli_core.json\")\n\ninclude(\"../../test/data_static.jl\")","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Load model, and convert to CanonicalModel for ease of use","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"model = convert(A.CanonicalModel.Model, X.load_model(\"e_coli_core.json\"))\n\nfor rid in [\"ACt2r\", \"ETOHt2r\", \"PYRt2\", \"SUCCt3\"]\n    model.reactions[rid].gene_association_dnf = [[\"s0001\"]]\nend","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Modify the model a little bit","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"model.reactions[\"EX_glc__D_e\"].lower_bound = -1000.0 # capacity bound suffices\nmodel.reactions[\"PFL\"].upper_bound = 0.0 # aerobic simulation","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Create parameters of all kcats","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"rid_kcat = Dict(k => Ex(Symbol(k)) for (k, _) in ecoli_core_reaction_kcats)","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Create a lookup table to map parameters to values","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"parameter_values = Dict{Symbol,Float64}()","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Create a symbolic reaction_isozyme structure to feed into COBREXA","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"reaction_isozymes = Dict{String,Dict{String,X.IsozymeT{Ex}}}() # a mapping from reaction IDs to isozyme IDs to isozyme structs.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Populate reaction_isozymes with parameters","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"for rid in A.reactions(model)\n    grrs = A.reaction_gene_association_dnf(model, rid)\n    isnothing(grrs) && continue # skip if no grr available\n    haskey(ecoli_core_reaction_kcats, rid) || continue # skip if no kcat data available\n\n    for (i, grr) in enumerate(grrs)\n\n        kcat = ecoli_core_reaction_kcats[rid] * 3.6 # change unit to k/h\n        parameter_values[Symbol(rid)] = kcat # to substitute later\n\n        d = get!(reaction_isozymes, rid, Dict{String,X.IsozymeT{Ex}}()) # NB: IsozymeT\n        d[\"isozyme_$i\"] = X.IsozymeT{Ex}(\n            gene_product_stoichiometry = Dict(grr .=> fill(1.0, size(grr))), # assume subunit stoichiometry of 1 for all isozymes\n            kcat_forward = rid_kcat[rid], # assume forward and reverse have the same kcat\n            kcat_reverse = rid_kcat[rid],\n        )\n\n    end\nend","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"tip: Use the generalized IsozymeT struct from COBREXA\nNote, COBREXA.jl exports Isozyme which is specialized to Float64. To use parameters as shown here, you must use the more general type IsozymeT.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Add gene product molar mass and capacity constraint info","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"gene_product_molar_masses = Dict(k => v for (k, v) in ecoli_core_gene_product_masses)\n\nF.@variables capacitylimitation\nparameter_values[:capacitylimitation] = 50.0 # mg enzyme/gDW","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Create and solve a COBREXA enzyme constrained model","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"km = X.enzyme_constrained_flux_balance_constraints( # kinetic model\n    model;\n    reaction_isozymes,\n    gene_product_molar_masses,\n    capacity = capacitylimitation,\n)\n\nec_solution = D.optimized_constraints_with_parameters(\n    km,\n    parameter_values;\n    objective = km.objective.value,\n    optimizer = T.Optimizer,\n    modifications = [X.set_optimizer_attribute(\"IPM_IterationsLimit\", 10_000)],\n)\n\nec_solution.tree","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Note, this solution contains many inactive reactions","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"sort(collect(ec_solution.tree.fluxes), by = ComposedFunction(abs, last))","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"And also many inactive gene products.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"sort(collect(ec_solution.tree.gene_product_amounts), by = last)","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"With theory, you can show that this introduces flux variability into the solution, making it non-unique, and consequently non-differentiable. To fix this, one need to prune the model, to include only the active reactions and genes. This can be differentiated uniquely. Below we build a pruned kinetic model, by removing all the reactions, metabolites, and genes that are not active.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"flux_zero_tol = 1e-6 # these bounds make a real difference!\ngene_zero_tol = 1e-6\n\npruned_model, pruned_reaction_isozymes = D.prune_model(\n    model,\n    ec_solution.tree.fluxes,\n    ec_solution.tree.gene_product_amounts,\n    reaction_isozymes,\n    ec_solution.tree.isozyme_forward_amounts,\n    ec_solution.tree.isozyme_reverse_amounts,\n    flux_zero_tol,\n    gene_zero_tol,\n);\n\npruned_model\n\n\npkm = X.enzyme_constrained_flux_balance_constraints( # pruned kinetic model\n    pruned_model;\n    reaction_isozymes = pruned_reaction_isozymes,\n    gene_product_molar_masses,\n    capacity = [(\"total\", A.genes(pruned_model), capacitylimitation)],\n)\n\npruned_solution = D.optimized_constraints_with_parameters(\n    pkm,\n    parameter_values;\n    objective = pkm.objective.value,\n    optimizer = T.Optimizer,\n    modifications = [X.set_optimizer_attribute(\"IPM_IterationsLimit\", 10_000)],\n)","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Notice, the solution is exactly the same as before, except that all the inactive elements are gone.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"pruned_solution.tree","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"no zero fluxes and all fluxes are made positive!","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"sort(collect(pruned_solution.tree.fluxes), by = ComposedFunction(abs, last))","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"no zero genes","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"sort(abs.(collect(values(pruned_solution.tree.gene_product_amounts))))","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Now we will differentiate the solution. First select parameters that will be differentiated.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"kcats = Symbol.(keys(pruned_reaction_isozymes))\nparameters = [:capacitylimitation; kcats]","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Next prepare the model for differentiation","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"pkm_kkt, vids = D.differentiate_prepare_kkt(pkm, pkm.objective.value, parameters)\n\nsens = D.differentiate_solution(\n    pkm_kkt,\n    pruned_solution.primal_values,\n    pruned_solution.equality_dual_values,\n    pruned_solution.inequality_dual_values,\n    parameter_values,\n    scale = true, # unitless sensitivities\n)","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"look at oxidative phosphorylation only","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"subset_ids = [:CYTBD, :NADH16, :ATPS4r]\n\nflux_idxs = findall(x -> last(x) in subset_ids && first(x) == :fluxes, vids)\nflux_ids = last.(vids[flux_idxs])\n\niso_idxs = findall(x -> x[2] in subset_ids && occursin(\"isozyme\", string(x[1])), vids)\niso_ids = [v[2] for v in vids[iso_idxs]]\n\nparam_idxs = findall(x -> x in subset_ids, parameters)\nparam_ids = parameters[param_idxs]","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Flux sensitivities","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"f, a, hm = CM.heatmap(\n    sens[flux_idxs, param_idxs]';\n    axis = (\n        xlabel = \"kcat\",\n        xticks = (1:length(param_ids), string.(param_ids)),\n        xticklabelrotation = -pi / 2,\n        ylabel = \"Flux\",\n        yticks = (1:length(flux_ids), string.(flux_ids)),\n        title = \"Flux sensitivities\",\n    ),\n)\nCM.Colorbar(f[1, 2], hm)\nf","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Isozyme sensitivities. Note, the gene products themselves are not variables in the formulation of the kinetic model. It inherits its structure from COBREXA, where the gene products are derived variables. If you want the sensitivities of the gene products themselves, you just need to multiply the isozyme sensitivity with the subunit stoichiometry of the relevant gene products.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"f, a, hm = CM.heatmap(\n    sens[iso_idxs, param_idxs]';\n    axis = (\n        xlabel = \"kcat\",\n        xticks = (1:length(param_ids), string.(param_ids)),\n        xticklabelrotation = -pi / 2,\n        ylabel = \"Isozyme\",\n        yticks = (1:length(iso_ids), string.(iso_ids)),\n        title = \"Isozyme sensitivities\",\n    ),\n)\nCM.Colorbar(f[1, 2], hm)\nf","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Solver-implementation","page":"Reference","title":"Solver implementation","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/solver.jl\", \"src/get_constraints.jl\", \"src/substitute.jl\"]","category":"page"},{"location":"reference/#DifferentiableMetabolism.constraint_matrix_vector-Tuple{Any, Any, Any}","page":"Reference","title":"DifferentiableMetabolism.constraint_matrix_vector","text":"constraint_matrix_vector(\n    eqs,\n    m,\n    parameters\n) -> Tuple{SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseVector{Float64, Int64}}\n\n\nBuilds a matrix representation of bounds.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.optimization_model_with_parameters-Tuple{ConstraintTrees.ConstraintTree, Dict{Symbol, Float64}}","page":"Reference","title":"DifferentiableMetabolism.optimization_model_with_parameters","text":"optimization_model_with_parameters(\n    m::ConstraintTrees.ConstraintTree,\n    parameters::Dict{Symbol, Float64};\n    objective,\n    optimizer,\n    sense\n)\n\n\nConstruct a JuMP model by substituting parameters into the model, m. Set the objective and the optimizer, as well as the sense similar to COBREXA.optimization_model.\n\nConverts all inequality constraints to the form A * x ≤ b.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.optimized_constraints_with_parameters-Tuple{ConstraintTrees.ConstraintTree, Dict{Symbol, Float64}}","page":"Reference","title":"DifferentiableMetabolism.optimized_constraints_with_parameters","text":"optimized_constraints_with_parameters(\n    model::ConstraintTrees.ConstraintTree,\n    parameters::Dict{Symbol, Float64};\n    optimizer,\n    modifications,\n    objective,\n    sense\n)\n\n\nSolve a model using optimizer by substituting in parameters. Optional arguments are the same as in COBREXA.\n\nIf the model does not solve successfully return nothing. Otherwise, return a named tuple of the solution tree, and vectors containing the values of the primal variables, the dual variables.\n\nThese duals are ordered according to the constraint output of calling equality_constraints and inequality_constraints respectively.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.equality_constraints-Tuple{ConstraintTrees.ConstraintTree}","page":"Reference","title":"DifferentiableMetabolism.equality_constraints","text":"equality_constraints(\n    m::ConstraintTrees.ConstraintTree\n) -> Vector{Tuple{Union{ConstraintTrees.LinearValueT{FastDifferentiation.Node}, ConstraintTrees.LinearValue}, FastDifferentiation.Node}}\n\n\nReturn all the equality constraints of m as a tuple (constraint, bound) representing constraint == bound for each entry.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.get_equality_constraints-Tuple{ConstraintTrees.Constraint, Any}","page":"Reference","title":"DifferentiableMetabolism.get_equality_constraints","text":"get_equality_constraints(\n    c::ConstraintTrees.Constraint,\n    sink\n) -> Any\n\n\nHelper function for equality_constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.get_equality_constraints-Tuple{ConstraintTrees.ConstraintTree, Any}","page":"Reference","title":"DifferentiableMetabolism.get_equality_constraints","text":"get_equality_constraints(\n    m::ConstraintTrees.ConstraintTree,\n    sink\n) -> Any\n\n\nHelper function for equality_constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.get_inequality_constraints-Tuple{ConstraintTrees.Constraint, Any}","page":"Reference","title":"DifferentiableMetabolism.get_inequality_constraints","text":"get_inequality_constraints(\n    c::ConstraintTrees.Constraint,\n    sink\n) -> Any\n\n\nHelper function for inequality_constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.get_inequality_constraints-Tuple{ConstraintTrees.ConstraintTree, Any}","page":"Reference","title":"DifferentiableMetabolism.get_inequality_constraints","text":"get_inequality_constraints(\n    m::ConstraintTrees.ConstraintTree,\n    sink\n) -> Any\n\n\nHelper function for inequality_constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.inequality_constraints-Tuple{ConstraintTrees.ConstraintTree}","page":"Reference","title":"DifferentiableMetabolism.inequality_constraints","text":"inequality_constraints(\n    m::ConstraintTrees.ConstraintTree\n) -> Vector\n\n\nReturn all the inequality constraints of m as a tuple of bounds converted to the form (constraint, upper) representing constraint ≤ upper for each entry.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.is_constrained-Tuple{Any}","page":"Reference","title":"DifferentiableMetabolism.is_constrained","text":"is_constrained(x) -> Bool\n\n\nCheck if the argument is constrained (i.e. bound not infinity) or not.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.substitute-Tuple{FastDifferentiation.Node, Any}","page":"Reference","title":"DifferentiableMetabolism.substitute","text":"substitute(x::FastDifferentiation.Node, lookup) -> Any\n\n\nStraightforward recursive evaluator for Exs.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Overloads","page":"Reference","title":"Overloads","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/misc.jl\", \"src/parameter_promotion.jl\"]","category":"page"},{"location":"reference/#Pruning-models","page":"Reference","title":"Pruning models","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/prune.jl\"]","category":"page"},{"location":"reference/#DifferentiableMetabolism.prune_model-Tuple{AbstractFBCModels.CanonicalModel.Model, Any, Any, Any, Any, Any, Float64, Float64}","page":"Reference","title":"DifferentiableMetabolism.prune_model","text":"prune_model(\n    model::AbstractFBCModels.CanonicalModel.Model,\n    solution_fluxes,\n    solution_gene_product_amounts,\n    reaction_isozymes,\n    solution_isozyme_forward_amounts,\n    solution_isozyme_reverse_amounts,\n    flux_zero_tol::Float64,\n    gene_zero_tol::Float64\n) -> Tuple{AbstractFBCModels.CanonicalModel.Model, Dict}\n\n\nPrune away reactions, metabolites, and genes from a model using solution. Additionally, adjust reaction_isozymes using prune_reaction_isozymes to account for the changed directions of the fluxes.\n\nFluxes and gene product concentrations smaller than flux_zero_tol, gene_zero_tol are removed. Metabolites that do not take part in the remaining reactions are also removed.\n\nNote, in COBREXA reverse variables are always derived quantities, hence making everything forward orientated ensures that the variables of the whole model are just these.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.prune_reaction_isozymes-Tuple{Any, Any, Any, Any, Float64}","page":"Reference","title":"DifferentiableMetabolism.prune_reaction_isozymes","text":"prune_reaction_isozymes(\n    reaction_isozymes,\n    solution_isozyme_forward_amounts,\n    solution_isozyme_reverse_amounts,\n    solution_fluxes,\n    gene_zero_tol::Float64\n) -> Dict\n\n\nReturn a freshly allocated dictionary mapping reaction IDs to isozyme structs. Note, all reactions running in reverse have their kcats swapped, since prune_model changes all fluxes to be positive.\n\nExample\n\nprune_reaction_isozymes(reaction_isozymes, solution.isozyme_forward_amounts, solution.isozyme_reverse_amounts, solution.fluxes, 1e-6)\n\n\n\n\n\n","category":"method"},{"location":"reference/#Differentiation-of-pruned-models","page":"Reference","title":"Differentiation of pruned models","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/differentiate.jl\"]","category":"page"},{"location":"reference/#DifferentiableMetabolism.differentiate_prepare_kkt-Tuple{ConstraintTrees.ConstraintTree, ConstraintTrees.Value, Vector{Symbol}}","page":"Reference","title":"DifferentiableMetabolism.differentiate_prepare_kkt","text":"differentiate_prepare_kkt(\n    m::ConstraintTrees.ConstraintTree,\n    objective::ConstraintTrees.Value,\n    parameters::Vector{Symbol}\n) -> Tuple{Tuple{SparseArrays.SparseMatrixCSC{FastDifferentiation.Node, Int64}, SparseArrays.SparseMatrixCSC{FastDifferentiation.Node, Int64}, Vector{FastDifferentiation.Node}, Vector{FastDifferentiation.Node}, Vector{FastDifferentiation.Node}, Vector{Symbol}}, Any}\n\n\nPrepare a model m with objective for differentiation with respect to parameters.\n\nThis is the most time consuming aspect of differentiation. It pays off to do this separately  if the same model will be differentiated multiple times.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.differentiate_solution-Tuple{Any, Vector{Float64}, Vector{Float64}, Vector{Float64}, Dict{Symbol, Float64}}","page":"Reference","title":"DifferentiableMetabolism.differentiate_solution","text":"differentiate_solution(\n    ,\n    primal_vals::Vector{Float64},\n    eq_dual_vals::Vector{Float64},\n    ineq_dual_vals::Vector{Float64},\n    parameter_values::Dict{Symbol, Float64};\n    scale\n) -> Any\n\n\nDifferentiate a solution of a model. The first argument is the output of differentiate_prepare_kkt, and is a tuple of the deconstructed model. The following arguments (primal_vals, eq_dual_vals, ineq_dual_vals) are outputs of optimized_constraints_with_parameters. parameter_values\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.findall_indeps_qr-Tuple{Any}","page":"Reference","title":"DifferentiableMetabolism.findall_indeps_qr","text":"findall_indeps_qr(A) -> Any\n\n\nReturn all linearly dependent constraints in  A, using the QR decomposition.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.variable_order-Tuple{Any}","page":"Reference","title":"DifferentiableMetabolism.variable_order","text":"variable_order(m) -> Any\n\n\nReturn the names of variables in m.\n\nNOTE: this function assumes that all variables are bounded explicitly in the model. nothing bounds are ignored.\n\n\n\n\n\n","category":"method"},{"location":"#DifferentiableMetabolism.jl","page":"README","title":"DifferentiableMetabolism.jl","text":"","category":"section"},{"location":"","page":"README","title":"README","text":"Documentation for DifferentiableMetabolism.","category":"page"},{"location":"","page":"README","title":"README","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/DifferentiableMetabolism.jl\"]","category":"page"}]
}
