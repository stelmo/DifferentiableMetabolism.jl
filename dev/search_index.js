var documenterSearchIndex = {"docs":
[{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"EditURL = \"3-parameter-estimation.jl\"","category":"page"},{"location":"3-parameter-estimation/#Parameter-estimation-using-proteomics-and-flux-data","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"","category":"section"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"using DifferentiableMetabolism\nusing AbstractFBCModels\nusing Symbolics\nusing ConstraintTrees\nusing COBREXA\nusing Clarabel\nusing Tulip\nusing JSONFBCModels\nusing CairoMakie\n\ninclude(\"../../test/simple_model.jl\") #hide","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"prune model for brevity","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"delete!(model.reactions, \"r5\")\ndelete!(model.genes, \"g4\")\ndelete!(model.genes, \"g5\")\ndelete!(model.genes, \"g3\")\nmodel.reactions[\"r4\"].gene_association_dnf = [[\"g2\"]]\nmodel.reactions[\"r1\"].lower_bound = -1000.0\nmodel.reactions[\"r2\"].lower_bound = -1000.0","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"now models looks like this","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"(Image: simple_model)","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"kcats = Symbolics.@variables r3 r4\n\nreaction_isozymes = Dict(\n    \"r3\" => Dict(\n        \"isozyme1\" => ParameterIsozyme(\n            gene_product_stoichiometry = Dict(\"g1\" => 1.0), # assume subunit stoichiometry of 1 for all isozymes\n            kcat_forward = r3,\n            kcat_reverse = nothing,\n        ),\n    ),\n    \"r4\" => Dict(\n        \"isozyme1\" => ParameterIsozyme(\n            gene_product_stoichiometry = Dict(\"g2\" => 1.0), # assume subunit stoichiometry of 1 for all isozymes\n            kcat_forward = r4,\n            kcat_reverse = nothing,\n        ),\n    ),\n)\n\ngene_product_molar_masses = Dict(\"g1\" => 20.0, \"g2\" => 10.0)\n\nSymbolics.@variables capacitylimitation\n\ntrue_parameter_values = Dict(capacitylimitation => 50.0, r3 => 2.0, r4 => 3.0)\n\nkm = build_kinetic_model(\n    model;\n    reaction_isozymes,\n    gene_product_molar_masses,\n    capacity = capacitylimitation,\n)\n\nsol, _, _, _ = optimized_constraints_with_parameters(\n    km,\n    true_parameter_values;\n    objective = km.objective.value,\n    optimizer = Tulip.Optimizer,\n)\n\nsol.fluxes","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"create a loss function","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"measured = [\n    sol.fluxes.r1,\n    sol.fluxes.r3,\n    sol.isozyme_forward_amounts.r3.isozyme1,\n    sol.isozyme_forward_amounts.r4.isozyme1,\n]\n\nkm *=\n    :loss^ConstraintTrees.Constraint(;\n        value = 0.5 * (\n            ConstraintTrees.squared(km.fluxes.r1.value - measured[1]) +\n            ConstraintTrees.squared(km.fluxes.r3.value - measured[2]) +\n            ConstraintTrees.squared(\n                km.isozyme_forward_amounts.r3.isozyme1.value - measured[3],\n            ) +\n            ConstraintTrees.squared(\n                km.isozyme_forward_amounts.r4.isozyme1.value - measured[4],\n            )\n        ),\n        bound = nothing,\n    )\n\nestimated_parameters = Dict(capacitylimitation => 50.0, r3 => 5.0, r4 => 1.0) # initial values\nparameters = [r3, r4] # will differentiate against these two parameters\nη = 0.1 # learning rate\n\nlosses = Float64[]\n\nfor k = 1:150\n\n    sol2, x_vals, eq_dual_vals, ineq_dual_vals = optimized_constraints_with_parameters(\n        km,\n        estimated_parameters;\n        objective = km.loss.value,\n        optimizer = Clarabel.Optimizer,\n        sense = COBREXA.Minimal,\n        modifications = [COBREXA.silence],\n    )\n\n    push!(losses, sol2.loss)\n\n    sens, vids = differentiate(\n        km,\n        km.loss.value,\n        x_vals,\n        eq_dual_vals,\n        ineq_dual_vals,\n        estimated_parameters,\n        parameters;\n    )\n    measured_idxs = [1, 3, 11, 12]\n\n    x = [\n        sol2.fluxes.r1,\n        sol2.fluxes.r3,\n        sol2.isozyme_forward_amounts.r3.isozyme1,\n        sol2.isozyme_forward_amounts.r4.isozyme1,\n    ]\n\n    dL_dx = x - measured # derivative of loss function with respect to optimization variables\n    dL_dkcats = sens[measured_idxs, :]' * dL_dx # derivative of loss function with respect to parameters\n\n    estimated_parameters[r3] -= η * dL_dkcats[1]\n    estimated_parameters[r4] -= η * dL_dkcats[2]\nend\n\nlines(losses; axis = (xlabel = \"Iterations\", ylabel = \"L2 loss\"))","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"estimated_parameters","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"true_parameter_values","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"","category":"page"},{"location":"3-parameter-estimation/","page":"Parameter estimation using proteomics and flux data","title":"Parameter estimation using proteomics and flux data","text":"This page was generated using Literate.jl.","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"EditURL = \"1-parametric-models.jl\"","category":"page"},{"location":"1-parametric-models/#Parametric-constraint-based-metabolic-models","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"","category":"section"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"using DifferentiableMetabolism\n\nusing Symbolics\nusing ConstraintTrees\nusing COBREXA\nusing Tulip\nusing Clarabel","category":"page"},{"location":"1-parametric-models/#Load-and-solve-a-simple-model","page":"Parametric constraint-based metabolic models","title":"Load and solve a simple model","text":"","category":"section"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"The code used to construct the model is located in test/simple_model.jl, but it is not shown here for brevity. Below is a visualization of the model.","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"include(\"../../test/simple_model.jl\"); #hide\nnothing #hide","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"(Image: simple_model)","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"model","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"Build a basic ConstraintTree model without parameters","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"m = COBREXA.flux_balance_constraints(model)","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"Solve normally","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"base_model =\n    COBREXA.optimized_values(m; optimizer = Tulip.Optimizer, objective = m.objective.value)\nbase_model.fluxes","category":"page"},{"location":"1-parametric-models/#Add-parameters-to-the-model","page":"Parametric constraint-based metabolic models","title":"Add parameters to the model","text":"","category":"section"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"Make bound of r2 and mass balance of m3 parameters","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"Symbolics.@variables r2bound m3bound\n\nm.fluxes.r2 =\n    ConstraintTrees.Constraint(m.fluxes.r2.value, -2 * ParameterBetween(r2bound, 0))\n\nm.flux_stoichiometry.m3 =\n    ConstraintTrees.Constraint(m.flux_stoichiometry.m3.value, ParameterEqualTo(m3bound) / 2)","category":"page"},{"location":"1-parametric-models/#add-parametric-constraints","page":"Parametric constraint-based metabolic models","title":"add parametric constraints","text":"","category":"section"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"Symbolics.@variables p[1:4]\n\nm *=\n    :linparam^ConstraintTrees.Constraint(\n        value = p[1] * m.fluxes.r1.value + p[2] * m.fluxes.r2.value,\n        bound = -ParameterBetween(p[3], 0),\n    )","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"substitute params into model","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"parameter_substitutions = Dict(\n    r2bound => 4.0,\n    m3bound => 0.1, # lose some mass here\n    p[1] => 1.0,\n    p[2] => 1.0,\n    p[3] => 4.0,\n)\n\nm_noparams, _, _, _ = optimized_constraints_with_parameters(\n    m,\n    parameter_substitutions;\n    objective = m.objective.value,\n    optimizer = Tulip.Optimizer,\n)\nm_noparams.fluxes","category":"page"},{"location":"1-parametric-models/#Change-the-parameters-and-re-solve","page":"Parametric constraint-based metabolic models","title":"Change the parameters and re-solve","text":"","category":"section"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"substitute params into model","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"parameter_substitutions[m3bound] = 0.0\n\nm_noparams, _, _, _ = optimized_constraints_with_parameters(\n    m,\n    parameter_substitutions;\n    objective = m.objective.value,\n    optimizer = Tulip.Optimizer,\n)\nm_noparams.fluxes","category":"page"},{"location":"1-parametric-models/#Quadratic-parameters-also-work","page":"Parametric constraint-based metabolic models","title":"Quadratic parameters also work","text":"","category":"section"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"Symbolics.@variables q[1:6]\n\nm.objective = ConstraintTrees.Constraint(\n    value = sum(\n        rxn.value * rxn.value * qi for (qi, rxn) in zip(collect(q), values(m.fluxes))\n    ),\n    bound = nothing,\n)\n\nm *= :objective_bound^ConstraintTrees.Constraint(value = m.fluxes.r6.value, bound = 2.0)\n\nparameter_substitutions = merge(parameter_substitutions, Dict(zip(q, fill(1.0, 6))))\n\nm_noparams, _, _, _ = optimized_constraints_with_parameters(\n    m,\n    parameter_substitutions;\n    objective = m.objective.value,\n    optimizer = Clarabel.Optimizer,\n    sense = Minimal,\n)\nm_noparams.fluxes\n\npqv17 = ParameterLinearValue([1, 2], [2, 1]) * ParameterLinearValue([2], [1]) #src","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"","category":"page"},{"location":"1-parametric-models/","page":"Parametric constraint-based metabolic models","title":"Parametric constraint-based metabolic models","text":"This page was generated using Literate.jl.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"EditURL = \"2-differentiate-enzyme-model.jl\"","category":"page"},{"location":"2-differentiate-enzyme-model/#Differentiating-enzyme-constrained-metabolic-models","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"","category":"section"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"using DifferentiableMetabolism\nusing AbstractFBCModels\nusing Symbolics\nusing ConstraintTrees\nusing COBREXA\nusing Tulip\nusing JSONFBCModels\nimport Downloads: download\nusing CairoMakie\n\n!isfile(\"e_coli_core.json\") &&\n    download(\"http://bigg.ucsd.edu/static/models/e_coli_core.json\", \"e_coli_core.json\")\n\ninclude(\"../../test/data_static.jl\")\n\nmodel = load_model(\"e_coli_core.json\")","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"unconstrain glucose","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"rids = [x[\"id\"] for x in model.reactions]\nglc_idx = first(indexin([\"EX_glc__D_e\"], rids))\nmodel.reactions[glc_idx][\"lower_bound\"] = -1000.0","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"constrain PFL to zero","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"pfl_idx = first(indexin([\"PFL\"], rids))\nmodel.reactions[pfl_idx][\"upper_bound\"] = 0.0\n\nkcats = vcat([Symbolics.@variables $x for x in Symbol.(keys(ecoli_core_reaction_kcats))]...)\n\nrid_kcat = Dict(zip(keys(ecoli_core_reaction_kcats), kcats))\n\nparameter_values =\n    Dict(kid => ecoli_core_reaction_kcats[rid] * 3.6 for (rid, kid) in rid_kcat) # change unit to k/h\n\nreaction_isozymes = Dict{String,Dict{String,ParameterIsozyme}}() # a mapping from reaction IDs to isozyme IDs to isozyme structs.\nfor rid in AbstractFBCModels.reactions(model)\n    grrs = AbstractFBCModels.reaction_gene_association_dnf(model, rid)\n    isnothing(grrs) && continue # skip if no grr available\n    haskey(ecoli_core_reaction_kcats, rid) || continue # skip if no kcat data available\n    for (i, grr) in enumerate(grrs)\n        d = get!(reaction_isozymes, rid, Dict{String,ParameterIsozyme}())\n        d[\"isozyme_\"*string(i)] = ParameterIsozyme(\n            gene_product_stoichiometry = Dict(grr .=> fill(1.0, size(grr))), # assume subunit stoichiometry of 1 for all isozymes\n            kcat_forward = rid_kcat[rid],\n            kcat_reverse = rid_kcat[rid],\n        )\n    end\nend\n\ngene_product_molar_masses = Dict(k => v for (k, v) in ecoli_core_gene_product_masses)\n\nSymbolics.@variables capacitylimitation\nparameter_values[capacitylimitation] = 50.0 # mg enzyme/gDW\n\nkm = build_kinetic_model(\n    model;\n    reaction_isozymes,\n    gene_product_molar_masses,\n    capacity = capacitylimitation,\n)\n\nec_solution, _, _, _ = optimized_constraints_with_parameters(\n    km,\n    parameter_values;\n    objective = km.objective.value,\n    optimizer = Tulip.Optimizer,\n    modifications = [COBREXA.set_optimizer_attribute(\"IPM_IterationsLimit\", 10_000)],\n)\n\nec_solution","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"This solution contains many inactive reactions","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"sort(abs.(collect(values(ec_solution.fluxes))))","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"And also many inactive gene products.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"sort(abs.(collect(values(ec_solution.gene_product_amounts))))","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"With theory, you can show that this introduces flux variability into the solution, making it non-unique, and consequently non-differentiable. To fix this, one need to prune the model, to include only the active reactions and genes. This can be differentiated uniquely. Below we build a pruned kinetic model, by removing all the reactions, metabolites, and genes that are not active.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"flux_zero_tol = 1e-6 # these bounds make a real difference!\ngene_zero_tol = 1e-6\n\npruned_reaction_isozymes =\n    prune_reaction_isozymes(reaction_isozymes, ec_solution, gene_zero_tol)\n\npruned_gene_product_molar_masses =\n    prune_gene_product_molar_masses(gene_product_molar_masses, ec_solution, gene_zero_tol)\n\npkm = build_kinetic_model(\n    prune_model(model, ec_solution, flux_zero_tol, gene_zero_tol);\n    reaction_isozymes = pruned_reaction_isozymes,\n    gene_product_molar_masses = pruned_gene_product_molar_masses,\n    capacity = capacitylimitation,\n)\n\nec_solution2, x_vals, eq_dual_vals, ineq_dual_vals = optimized_constraints_with_parameters(\n    pkm,\n    parameter_values;\n    objective = pkm.objective.value,\n    optimizer = Tulip.Optimizer,\n    modifications = [COBREXA.set_optimizer_attribute(\"IPM_IterationsLimit\", 10_000)],\n)","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Notice, the solution is exactly the same as before, except that all the inactive elements are gone.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"ec_solution2","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"no zero fluxes","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"sort(abs.(collect(values(ec_solution2.fluxes))))","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"no zero genes","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"sort(abs.(collect(values(ec_solution2.gene_product_amounts))))","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"prune the kcats, leaving only those that are actually used","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"pruned_kcats = [\n    begin\n        x = first(values(v))\n        isnothing(x.kcat_forward) ? x.kcat_reverse : x.kcat_forward\n    end for v in values(pruned_reaction_isozymes)\n]\n\nparameters = [capacitylimitation; kcats]\n\nsens, vids = differentiate(\n    pkm,\n    pkm.objective.value,\n    x_vals,\n    eq_dual_vals,\n    ineq_dual_vals,\n    parameter_values,\n    parameters;\n    scale = true, # unitless sensitivities\n)","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"look at glycolysis and oxidative phosphorylation only","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"subset_ids = [\n    r[\"id\"] for r in model.reactions[indexin(string.(keys(pkm.fluxes)), rids)] if\n    r[\"subsystem\"] in [\"Glycolysis/Gluconeogenesis\", \"Oxidative Phosphorylation\"]\n]\n\nflux_idxs = findall(x -> string(last(x)) in subset_ids && first(x) == :fluxes, vids)\nflux_ids = last.(vids[flux_idxs])\n\niso_idxs = findall(x -> string(x[2]) in subset_ids && first(x) != :fluxes, vids)\niso_ids = [v[2] for v in vids[iso_idxs]]\n\nparam_idxs = findall(x -> string(x) in subset_ids, parameters)\nparam_ids = parameters[param_idxs]","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Flux sensitivities","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"f, a, hm = heatmap(\n    sens[flux_idxs, param_idxs]';\n    axis = (\n        xlabel = \"kcat\",\n        xticks = (1:length(param_ids), string.(param_ids)),\n        xticklabelrotation = -pi / 2,\n        ylabel = \"Flux\",\n        yticks = (1:length(flux_ids), string.(flux_ids)),\n        title = \"Flux sensitivities\",\n    ),\n)\nColorbar(f[1, 2], hm)\nf","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"Isozyme sensitivities. Note, the gene products themselves are not variables in the formulation of the kinetic model. It inherits its structure from COBREXA, where the gene products are derived variables. If you want the sensitivities of the gene products themselves, you just need to multiply the isozyme sensitivity with the subunit stoichiometry of the relevant gene products.","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"f, a, hm = heatmap(\n    sens[iso_idxs, param_idxs]';\n    axis = (\n        xlabel = \"kcat\",\n        xticks = (1:length(param_ids), string.(param_ids)),\n        xticklabelrotation = -pi / 2,\n        ylabel = \"Isozyme\",\n        yticks = (1:length(iso_ids), string.(iso_ids)),\n        title = \"Isozyme sensitivities\",\n    ),\n)\nColorbar(f[1, 2], hm)\nf","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"","category":"page"},{"location":"2-differentiate-enzyme-model/","page":"Differentiating enzyme constrained metabolic models","title":"Differentiating enzyme constrained metabolic models","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Parameters","page":"Reference","title":"Parameters","text":"","category":"section"},{"location":"reference/#ParameterLinearValue","page":"Reference","title":"ParameterLinearValue","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/parameter_linearvalue.jl\"]","category":"page"},{"location":"reference/#DifferentiableMetabolism.ParameterLinearValue","page":"Reference","title":"DifferentiableMetabolism.ParameterLinearValue","text":"struct ParameterLinearValue <: ConstraintTrees.Value\n\nAn extension of ConstraintTrees.LinearValue where the weights are parameters.\n\nParameterLinearValues can be combined additively and multiplied by real-number constants.\n\nMultiplying two ParameterLinearValues yields a quadratic form (in a ParameterQuadraticValue).\n\nFields\n\nidxs::Vector{Int64}\nweights::Vector{Symbolics.Num}\n\n\n\n\n\n","category":"type"},{"location":"reference/#ParameterQuadraticValue","page":"Reference","title":"ParameterQuadraticValue","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/parameter_quadraticvalue.jl\"]","category":"page"},{"location":"reference/#DifferentiableMetabolism.ParameterQuadraticValue","page":"Reference","title":"DifferentiableMetabolism.ParameterQuadraticValue","text":"struct ParameterQuadraticValue <: ConstraintTrees.Value\n\nAn extension of ConstraintTrees.QuadraticValue where the weights are parameters.\n\nBehaves similarly to ConstraintTrees.QuadraticValue. Thus, the cleanest way to construct a ParameterQuadraticValue is to multiply two ParameterLinearValues.\n\nFields\n\nidxs::Vector{Tuple{Int64, Int64}}\nweights::Vector{Symbolics.Num}\n\n\n\n\n\n","category":"type"},{"location":"reference/#ParameterBound","page":"Reference","title":"ParameterBound","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/parameter_bound.jl\"]","category":"page"},{"location":"reference/#DifferentiableMetabolism.ParameterBetween","page":"Reference","title":"DifferentiableMetabolism.ParameterBetween","text":"mutable struct ParameterBetween <: ConstraintTrees.Bound\n\nRepresentation of an \"interval\" bound where the lower and upper bound values are parameters. Since Symbolics.Num is a subtype of Real, the bounds could also be any real number, but they are converted by the constructors to Symbolics.Nums. \n\nFields\n\nlower::Symbolics.Num\nupper::Symbolics.Num\n\n\n\n\n\n","category":"type"},{"location":"reference/#DifferentiableMetabolism.ParameterEqualTo","page":"Reference","title":"DifferentiableMetabolism.ParameterEqualTo","text":"mutable struct ParameterEqualTo <: ConstraintTrees.Bound\n\nRepresentation of an \"equality\" bound, where the bound value is a parameter. Since Symbolics.Num is a subtype of Real, the bound could also be any real number, but it is converted by the constructor to a Symbolics.Num.\n\nFields\n\nequal_to::Symbolics.Num\n\n\n\n\n\n","category":"type"},{"location":"reference/#ParameterIsozyme","page":"Reference","title":"ParameterIsozyme","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/parameter_isozyme.jl\"]","category":"page"},{"location":"reference/#DifferentiableMetabolism.ParameterIsozyme","page":"Reference","title":"DifferentiableMetabolism.ParameterIsozyme","text":"mutable struct ParameterIsozyme\n\nA parameterized isozyme struct which includes parameters in the kcat_forward, and the kcat_backward. If the reaction does not have a turnover number,nothing can be used. \n\nFields\n\ngene_product_stoichiometry::Dict{String, Float64}\nkcat_forward::Union{Nothing, Symbolics.Num}\nkcat_reverse::Union{Nothing, Symbolics.Num}\n\n\n\n\n\n","category":"type"},{"location":"reference/#Parameterized-models","page":"Reference","title":"Parameterized models","text":"","category":"section"},{"location":"reference/#Kinetic-models","page":"Reference","title":"Kinetic models","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/kinetic_model.jl\"]","category":"page"},{"location":"reference/#DifferentiableMetabolism.build_kinetic_model-Union{Tuple{AbstractFBCModels.AbstractFBCModel}, Tuple{R}} where R<:Real","page":"Reference","title":"DifferentiableMetabolism.build_kinetic_model","text":"build_kinetic_model(\n    model::AbstractFBCModels.AbstractFBCModel;\n    reaction_isozymes,\n    gene_product_molar_masses,\n    capacity\n)\n\n\nEssentially an enzyme constrained metabolic model, but the kcat can be a arbitrary symbolic function.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Solving-models","page":"Reference","title":"Solving models","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/solver.jl\"]","category":"page"},{"location":"reference/#DifferentiableMetabolism.constraint_matrix_vector-Tuple{Any, Any, Any}","page":"Reference","title":"DifferentiableMetabolism.constraint_matrix_vector","text":"constraint_matrix_vector(\n    eqs,\n    m,\n    parameters\n) -> Tuple{SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseVector{Float64, Int64}}\n\n\nBuilds a matrix representation of bounds.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.optimization_model_with_parameters-Tuple{ConstraintTrees.Tree{ConstraintTrees.Constraint}, Dict{Symbolics.Num, Float64}}","page":"Reference","title":"DifferentiableMetabolism.optimization_model_with_parameters","text":"optimization_model_with_parameters(\n    m::ConstraintTrees.Tree{ConstraintTrees.Constraint},\n    parameters::Dict{Symbolics.Num, Float64};\n    objective,\n    optimizer,\n    sense\n)\n\n\nConstruct a JuMP model by substituting parameters into the model, m. Set the objective and the optimizer, as well as the sense similar to COBREXA.optimization_model.\n\nConverts all inequality constraints to the form A * x ≤ b.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.optimized_constraints_with_parameters-Tuple{ConstraintTrees.Tree{ConstraintTrees.Constraint}, Dict{Symbolics.Num, Float64}}","page":"Reference","title":"DifferentiableMetabolism.optimized_constraints_with_parameters","text":"optimized_constraints_with_parameters(\n    m::ConstraintTrees.Tree{ConstraintTrees.Constraint},\n    parameters::Dict{Symbolics.Num, Float64};\n    modifications,\n    objective,\n    optimizer,\n    sense\n)\n\n\nSolve a model, m, by forwarding arguments to optimization_model_with_parameters. \n\nOptionally, set optimizer attributes with modifications. If the model does not solve successfully return nothing. Otherwise, return a tuple of the solution tree, and vectors containing the values of the primal variables, the equality constraint dual variables. \n\nThese duals are ordered according to the constraint output of calling equality_constraints and inequality_constraints respectively.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Pruning-models","page":"Reference","title":"Pruning models","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/prune.jl\"]","category":"page"},{"location":"reference/#DifferentiableMetabolism.prune_gene_product_molar_masses-Tuple{Any, Any, Any}","page":"Reference","title":"DifferentiableMetabolism.prune_gene_product_molar_masses","text":"prune_gene_product_molar_masses(\n    gene_product_molar_masses,\n    ec_solution,\n    gene_zero_tol\n) -> Dict\n\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.prune_model-NTuple{4, Any}","page":"Reference","title":"DifferentiableMetabolism.prune_model","text":"prune_model(\n    model,\n    ec_solution,\n    flux_zero_tol,\n    gene_zero_tol\n) -> AbstractFBCModels.CanonicalModel.Model\n\n\nPrune away reactions, metabolites, and genes from a model using ec_solution, which is the result of an enzyme constrained kinetic simulation. Fluxes and gene product concentrations smaller than flux_zero_tol, gene_zero_tol are removed. Metabolites that do not take part in the remaining reactions are also removed.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.prune_reaction_isozymes-Tuple{Any, Any, Any}","page":"Reference","title":"DifferentiableMetabolism.prune_reaction_isozymes","text":"prune_reaction_isozymes(\n    reaction_isozymes,\n    ec_solution,\n    gene_zero_tol\n) -> Dict\n\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"reference/#Differentiation","page":"Reference","title":"Differentiation","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/differentiate.jl\"]","category":"page"},{"location":"reference/#DifferentiableMetabolism.differentiate-Tuple{ConstraintTrees.Tree{ConstraintTrees.Constraint}, ConstraintTrees.Value, Vector{Float64}, Vector{Float64}, Vector{Float64}, Dict{Symbolics.Num, Float64}, Vector{Symbolics.Num}}","page":"Reference","title":"DifferentiableMetabolism.differentiate","text":"differentiate(\n    m::ConstraintTrees.Tree{ConstraintTrees.Constraint},\n    objective::ConstraintTrees.Value,\n    x_vals::Vector{Float64},\n    eq_dual_vals::Vector{Float64},\n    ineq_dual_vals::Vector{Float64},\n    parameter_values::Dict{Symbolics.Num, Float64},\n    parameters::Vector{Symbolics.Num};\n    scale\n) -> Tuple{Any, Any}\n\n\nDifferentiate a model m with respect to parameters which take on values parameter_values in the optimal solution with respect to the objective. The primal variables x_vals, and the dual variable values eq_dual_vals and ineq_dual_vals need to be supplied. \n\nInternally, primal variables with value abs(x) ≤ primal_zero_tol are removed from the computation, and their sensitivities are not calculated.  \n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.findall_indeps_qr-Tuple{Any}","page":"Reference","title":"DifferentiableMetabolism.findall_indeps_qr","text":"findall_indeps_qr(A) -> Any\n\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.variable_order-Tuple{Any}","page":"Reference","title":"DifferentiableMetabolism.variable_order","text":"variable_order(m) -> Any\n\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"reference/#Internals","page":"Reference","title":"Internals","text":"","category":"section"},{"location":"reference/#Constraint-tree-extensions","page":"Reference","title":"Constraint tree extensions","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/constraint_trees.jl\"]","category":"page"},{"location":"reference/#Optimization-problem-builders","page":"Reference","title":"Optimization problem builders","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/get_constraints.jl\"]","category":"page"},{"location":"reference/#DifferentiableMetabolism.constrained-Tuple{Any}","page":"Reference","title":"DifferentiableMetabolism.constrained","text":"constrained(x) -> Bool\n\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.equality_constraints-Tuple{ConstraintTrees.Tree{ConstraintTrees.Constraint}}","page":"Reference","title":"DifferentiableMetabolism.equality_constraints","text":"equality_constraints(\n    m::ConstraintTrees.Tree{ConstraintTrees.Constraint}\n) -> Vector{Tuple{Union{ConstraintTrees.LinearValue, ParameterLinearValue}, Symbolics.Num}}\n\n\nReturn all the equality constraints of m as a tuple ({Parameter}LinearValue, value) representing {P}LV == value for each entry.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.get_equality_constraints-Tuple{ConstraintTrees.Constraint, Any}","page":"Reference","title":"DifferentiableMetabolism.get_equality_constraints","text":"get_equality_constraints(\n    c::ConstraintTrees.Constraint,\n    sink\n) -> Any\n\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.get_equality_constraints-Tuple{ConstraintTrees.Tree{ConstraintTrees.Constraint}, Any}","page":"Reference","title":"DifferentiableMetabolism.get_equality_constraints","text":"get_equality_constraints(\n    m::ConstraintTrees.Tree{ConstraintTrees.Constraint},\n    sink\n) -> Any\n\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.get_inequality_constraints-Tuple{ConstraintTrees.Constraint, Any}","page":"Reference","title":"DifferentiableMetabolism.get_inequality_constraints","text":"get_inequality_constraints(\n    c::ConstraintTrees.Constraint,\n    sink\n) -> Any\n\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.get_inequality_constraints-Tuple{ConstraintTrees.Tree{ConstraintTrees.Constraint}, Any}","page":"Reference","title":"DifferentiableMetabolism.get_inequality_constraints","text":"get_inequality_constraints(\n    m::ConstraintTrees.Tree{ConstraintTrees.Constraint},\n    sink\n) -> Any\n\n\nTODO\n\n\n\n\n\n","category":"method"},{"location":"reference/#DifferentiableMetabolism.inequality_constraints-Tuple{ConstraintTrees.Tree{ConstraintTrees.Constraint}}","page":"Reference","title":"DifferentiableMetabolism.inequality_constraints","text":"inequality_constraints(\n    m::ConstraintTrees.Tree{ConstraintTrees.Constraint}\n) -> Vector\n\n\nReturn all the inequality constraints of m as a tuple of bounds converted to the form ({Parameter}LinearValue, upper) representing {P}LV ≤ upper for each entry. \n\n\n\n\n\n","category":"method"},{"location":"reference/#Symbolics-extensions","page":"Reference","title":"Symbolics extensions","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/symbolics.jl\"]","category":"page"},{"location":"#DifferentiableMetabolism.jl","page":"README","title":"DifferentiableMetabolism.jl","text":"","category":"section"},{"location":"","page":"README","title":"README","text":"Documentation for DifferentiableMetabolism.","category":"page"},{"location":"","page":"README","title":"README","text":"Modules = [DifferentiableMetabolism]\nPages = [\"src/DifferentiableMetabolism.jl\"]","category":"page"}]
}
